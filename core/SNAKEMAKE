#!uer/bin/env python3
# -*- coding:utf-8 -*-
import os,sys,glob
import logging
import gzip
import pandas as pd
import numpy as np
from Bio import SeqIO
from Bio.SeqRecord import SeqRecord
from collections import defaultdict

BASE_PATH = os.path.dirname(sys.path[0])
sys.path.append(BASE_PATH)

configfile: "samples.json"
configfile: "config.yaml"

CONDAENV = os.path.join(os.path.dirname(sys.path[0]),"envs")
BWAPAIR=os.path.join(BASE_PATH,"core","scripts","bwa_pair_mapping.py")
E_DB = os.path.join(BASE_PATH,"db","EggNOGV2")

include: "rules/run_quality_contol.py"
include: "rules/run_assembly.py"
include: "rules/run_circularized_and_verify.py"
include: "rules/run_isolating_plasmid_genome.py"
include: "rules/run_linear_non_redundant_contig.py"
include: "rules/run_circular_non_redundant_contig.py"
include: "rules/run_linear_non_redundant_gene.py"
include: "rules/run_circular_non_redundant_gene.py"


wildcard_constraints:
  sample="[^/]+"

# ruleorder: qc>assembly>isolation>contig_linear


rule all:
    input:
        "qc_reads/finished",
        "assembly_res/finished",
        "circular/finished",
        "linear_plasmid_genome/finished",
        "circular_non_redundant_contig/finished",
        "linear_non_redundant_contig/finished",
        "linear_non_redundant_gene/finished",
        "circular_non_redundant_gene/finished",



rule qc:
    input:
        expand("qc_reads/{sample}_qc_1.fastq.gz", sample=config["samples"]),
        expand("qc_reads/{sample}_qc_2.fastq.gz", sample=config["samples"]),
        "remindering_report/raw_reads_to_qc_reads.txt"
    output:
        temp(touch("qc_reads/finished"))


rule assembly:
    input:
        expand("assembly_res/{sample}_assembly_res",sample=config["samples"]),
        "remindering_report/qc_to_assembly.txt"
    output:
        temp(touch("assembly_res/finished"))


rule circular:
    input:
        expand("circular/plasmid/{sample}_verify_plasmid_circular.fasta",sample=config["samples"]),
        expand("circular/chromosome/{sample}_verify_chromosome_circular.fasta",sample=config["samples"]),
        "remindering_report/qc_to_circualr_metaplasmidspades.txt",
        "remindering_report/circualr_to_verify.txt"
    output:
        temp(touch("circular/finished"))


rule isolation:
    input:
        "remindering_report/liner_contig_to_plasmid.txt",
        expand("linear_plasmid_genome/{sample}_predict_plasmid.fa",sample=config["samples"])
    output:
        temp(touch("linear_plasmid_genome/finished"))


rule contig_circular:
    input:
        "circular_non_redundant_contig/contig_abundance/all_samples_contig_abundance.txt",
        "circular_non_redundant_contig/plasmid_classify/plasmid_classify.txt"
    output:
        temp(touch("circular_non_redundant_contig/finished"))


rule contig_linear:
    input:
        "linear_non_redundant_contig/contig_abundance/all_samples_contig_abundance.txt",
        # "linear_non_readundant_contig/clasify_platon",
        # "linear_non_redundant_contig/co-exist/annotation_ARGs",
        # "linear_non_redundant_contig/co-exist/annotation_vf/annotation_vf.txt",
        # "linear_non_redundant_contig/co-exist/annotation_BacMet2/annotation_BacMet2.txt",
        # # "linear_non_redundant_contig/co-exist/all_plasmids_with_MEGs.txt",
        # "linear_non_redundant_contig/gene_synteny.txt"
    output:
        temp(touch("linear_non_redundant_contig/finished"))


rule gene_linear:
    input:
        "linear_non_redundant_gene/abundance/all_linear_gene_abundance_based_contig_abundance.txt",
        "linear_non_redundant_gene/annotation_ARGs",
        "linear_non_redundant_gene/annotation_vf/annotation_vf.txt",
        "linear_non_redundant_gene/annotation_BacMet2/annotation_BacMet2.txt",
        "linear_non_redundant_gene/functional_annotation",
        # "linear_non_redundant_gene/MGES-annotation/all_plasmids_with_MEGs.txt"
    output:
        temp(touch("linear_non_redundant_gene/finished"))


rule gene_circular:
    input:
        "circular_non_redundant_gene/abundance/all_circular_gene_abundance_based_contig_abundance.txt",
        "circular_non_redundant_gene/annotation_ARGs",
        "circular_non_redundant_gene/annotation_vf/annotation_vf.txt",
        "circular_non_redundant_gene/annotation_BacMet2/annotation_BacMet2.txt",
        "circular_non_redundant_gene/functional_annotation"
    output:
        temp(touch("circular_non_redundant_gene/finished"))



